version: '3'

services:
  puppet:
    hostname: puppet.${DOMAIN:-internal}
    image: puppet/puppetserver
    ports:
      - 8140:8140
    environment:
      # necessary to set certname and server in puppet.conf, required by
      # puppetserver ca cli application
      - PUPPETSERVER_HOSTNAME=puppet.${DOMAIN:-internal}
      # DNS_ALT_NAMES must be set before starting the stack the first time,
      # and must list all the names under which the puppetserver can be
      # reached. 'puppet.${DOMAIN:-internal}' must be one of them, otherwise puppetdb won't be
      # able to get a cert. Add other names as a comma-separated list
      - DNS_ALT_NAMES=puppet,puppet.${DOMAIN:-internal},${DNS_ALT_NAMES:-}
      - PUPPERWARE_ANALYTICS_ENABLED=${PUPPERWARE_ANALYTICS_ENABLED:-true}
      - PUPPETDB_SERVER_URLS=https://puppetdb.${DOMAIN:-internal}:8081
    volumes:
      - ${VOLUME_ROOT:-.}/volumes/code:/etc/puppetlabs/code/
      - ${VOLUME_ROOT:-.}/volumes/puppet:/etc/puppetlabs/puppet/
      - ${VOLUME_ROOT:-.}/volumes/r10k:/etc/puppetlabs/r10k/
      - ${VOLUME_ROOT:-.}/volumes/serverdata:/opt/puppetlabs/server/data/puppetserver/
    dns_search: ${DOMAIN:-internal}
    networks:
      default:
        aliases:
         - puppet.${DOMAIN:-internal}

  postgres:
    image: postgres:9.6
    environment:
      - POSTGRES_PASSWORD=puppetdb
      - POSTGRES_USER=puppetdb
      - POSTGRES_DB=puppetdb
    expose:
      - 5432
    volumes:
      - ${VOLUME_ROOT:-.}/volumes/puppetdb-postgres/data:/var/lib/postgresql/data
      - ./postgres-custom:/docker-entrypoint-initdb.d
    dns_search: ${DOMAIN:-internal}
    networks:
      default:
        aliases:
         - postgres.${DOMAIN:-internal}

  puppetdb:
    hostname: puppetdb.${DOMAIN:-internal}
    image: puppet/puppetdb
    environment:
      - PUPPERWARE_ANALYTICS_ENABLED=${PUPPERWARE_ANALYTICS_ENABLED:-true}
      # This name is an FQDN so the short name puppet doesn't collide outside compose network
      - PUPPETSERVER_HOSTNAME=puppet.${DOMAIN:-internal}
      - PUPPETDB_POSTGRES_HOSTNAME=postgres.${DOMAIN:-internal}
      - PUPPETDB_PASSWORD=puppetdb
      - PUPPETDB_USER=puppetdb
    ports:
      - 8080
      - 8081
    depends_on:
      - postgres
      - puppet
    volumes:
      - ${VOLUME_ROOT:-.}/volumes/puppetdb/ssl:/etc/puppetlabs/puppet/ssl/
    dns_search: ${DOMAIN:-internal}
    networks:
      default:
        aliases:
         - puppetdb.${DOMAIN:-internal}

  puppetboard:
    hostname: puppetboard.${DOMAIN:-internal}
    image: puppet/puppetboard
    environment:
      - GRAPH_FACTS='architecture,puppetversion,osfamily'
      - ENABLE_CATALOG=True
    ports:
      - 8000:8000
    depends_on:
      - postgres
      - puppet
      - puppetdb
    dns_search: ${DOMAIN:-internal}
    networks:
      default:
        aliases:
         - puppetboard.${DOMAIN:-internal}
 
  puppetexplorer:
    hostname: puppetexplorer.${DOMAIN:-internal}
    image: puppet/puppetexplorer
    ports:
      - 8001:8001
    read_only: true
    depends_on:
      - postgres
      - puppet
      - puppetdb
    dns_search: ${DOMAIN:-internal}
    networks:
      default:
        aliases:
         - puppetexplorer.${DOMAIN:-internal}

puppet-catalog-diff-viewer:
    hostname: puppet-catalog-diff-viewer.${DOMAIN:-internal}
    image: camptocamp/puppet-catalog-diff-viewer
    ports:
      - 8002:80
    depends_on:
      - postgres
      - puppet
      - puppetdb
    volumes:
      - ${VOLUME_ROOT:-.}/volumes/puppet-catalog-diff-viewer:/data
    dns_search: ${DOMAIN:-internal}
    networks:
      default:
        aliases:
         - puppet-catalog-diff-viewer.${DOMAIN:-internal}

  watchtower:
    hostname: watchtower.${DOMAIN:-internal}
    image: v2tec/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /root/.docker/config.json:/config.json
    command: watchtower puppet puppetdbpostgres puppetdb puppetboard puppetexplorer puppet-catalog-diff-viewer --interval 30
    restart: unless-stopped
    dns_search: ${DOMAIN:-internal}
    networks:
      default:
        aliases:
         - watchtower.${DOMAIN:-internal}
    
  dockergc:
    hostname: docker-gc.${DOMAIN:-internal}
    image: clockworksoul/docker-gc-cron:latest
    restart: always
    volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - ${VOLUME_ROOT:-.}/volumes/docker-gc-exclude:/etc/docker-gc-exclude
    environment:
        # By default, docker-gc is run every night at midnight. Change this variable to override.
        - CRON=0 9,21 * * *

        # By default, docker will not remove an image if it is tagged in multiple repositories. If
        # you have a server running docker where this is the case, for example in CI environments 
        # where dockers are being built, re-tagged, and pushed, you can set this flag to 1 to override.
        - FORCE_IMAGE_REMOVAL=1

        # By default, if an error is encountered when cleaning up a container, Docker will report the
        # error back and leave it on disk. This can sometimes lead to containers accumulating. If
        # you run into this issue, you can force the removal of the container by setting this flag.
        - FORCE_CONTAINER_REMOVAL=1

        # By default, docker-gc will not remove a container if it exited less than 1 hour ago.
        # Set the GRACE_PERIOD_SECONDS variable to override this default.
        - GRACE_PERIOD_SECONDS=3600

        # By default, docker-gc will proceed with deletion of containers and images. To test your
        # settings set the DRY_RUN variable to override this default
        - DRY_RUN=0

        # By default, this process will leave any dangling volumes untouched. To instruct the
        # process to automatically clean up any dangling volumes, simply set this value to 1.
        - CLEAN_UP_VOLUMES=1
        
        # If you don't like all your log output and cron times being in UTC, you can set the
        # TZ variable to override the default.
        - TZ=America/New_York
    dns_search: ${DOMAIN:-internal}
    networks:
      default:
        aliases:
         - dockergc.${DOMAIN:-internal}
